---
title: "Car Efficiency Data Analysis"
author: "Aarya"
format: html
---

Cars in 2024 have almost 4 times the efficiency of cars from 1970, but also come in new variants, such as electric and hybrid. he following data was pulled from the top-selling cars between 1970 and 2024. Then, the company's data was used to compare the efficiency, mileage, and fuel type, and engine size of cars during this time. The average number of miles per gallon that cars could produce increased by about 5-10% a year from 1970 to 2011, but saw an increase of up to 300% from 2011 to 2024 due to the introduction of electric and hybrid cars. 

```{r}
#| message: false
#| echo: false

library(ggplot2)
library(gganimate)
library(readr)
library(dplyr)
library(scales)  # Load the scales package

# Load the data
cars_data <- read_csv("./data/CarsData.csv")
automobile_data <- read_csv("./data/Automobile.csv")

# Ensure fuelType and mileage columns exist and fill with NA if missing
if(!"fuelType" %in% names(cars_data)) {
  cars_data <- cars_data %>%
    mutate(fuelType = NA)
}
if(!"mileage" %in% names(cars_data)) {
  cars_data <- cars_data %>%
    mutate(mileage = NA)
}

# Align the columns in automobile_data to match cars_data
automobile_data <- automobile_data %>%
  rename(
    model = name,
    engineSize = displacement,
    year = model_year,
    mpg = mpg
  ) %>%
  mutate(
    price = NA,
    transmission = NA,
    mileage = NA,
    fuelType = NA,
    tax = NA,
    Manufacturer = NA
  ) %>%
  select(model, year, price, transmission, mileage, fuelType, tax, mpg, engineSize, Manufacturer)

# Combine the datasets
combined_data <- bind_rows(cars_data, automobile_data) %>%
  filter(year >= 1970)

# Create the scatter plot
p <- ggplot(combined_data, aes(x = engineSize, y = mpg, color = fuelType, size = mileage)) +
  geom_point(alpha = 0.7) +
  scale_size(range = c(1, 10), name = "Mileage", labels = comma) +  # Use the comma function to format labels
  labs(title = 'Year: {round(frame_time)}', x = 'Engine Size', y = 'MPG', color = "Fuel Type", size = "Mileage") +
  theme_minimal() + 
  transition_time(year) + 
  ease_aes('linear')

# Animate the plot with slower animation speed
animated_plot <- animate(p, nframes = 400, fps = 10, duration = 40)

animated_plot

```